nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"

    test("test-dataset_alevin_aligner") {

        when {
            // the rest is taken from shared config
            params {
                aligner    = 'alevin'
                outdir     = "${outputDir}/results_alevin"
            }
        }

        then {

            assertAll(

                //
                // General assertions
                //

                // Did it finish successfully?
                {assert workflow.success},

                // How many tasks were executed?
                {assert workflow.trace.tasks().size() == 15},

                // How many results were produced?
                {assert path("${outputDir}/results_alevin").list().size() == 5},
                {assert path("${outputDir}/results_alevin/alevin").list().size() == 3},
                {assert path("${outputDir}/results_alevin/alevin/mtx_conversions").list().size() == 5},
                {assert path("${outputDir}/results_alevin/alevinqc").list().size() == 2},
                {assert path("${outputDir}/results_alevin/fastqc").list().size() == 12},
                {assert path("${outputDir}/results_alevin/multiqc").list().size() == 3},

                //
                // Check if files were produced
                //
                {assert new File( "${outputDir}/results_alevin/alevin/mtx_conversions/Sample_X/Sample_X_raw_matrix.h5ad" ).exists()},
                {assert new File( "${outputDir}/results_alevin/alevin/mtx_conversions/Sample_Y/Sample_Y_raw_matrix.h5ad" ).exists()},

                //
                // Check if files are the same
                //
                {assert snapshot(
                    path( "${outputDir}/results_alevin/alevin/Sample_X/Sample_X_alevin_results/af_quant/alevin/quants_mat_cols.txt" ),
                    path( "${outputDir}/results_alevin/alevin/Sample_X/Sample_X_alevin_results/af_quant/alevin/quants_mat.mtx" ),
                    path( "${outputDir}/results_alevin/alevin/Sample_X/Sample_X_alevin_results/af_quant/alevin/quants_mat_rows.txt" ),
                    path( "${outputDir}/results_alevin/alevin/Sample_Y/Sample_Y_alevin_results/af_quant/alevin/quants_mat_cols.txt" ),
                    path( "${outputDir}/results_alevin/alevin/Sample_Y/Sample_Y_alevin_results/af_quant/alevin/quants_mat.mtx" ),
                    path( "${outputDir}/results_alevin/alevin/Sample_Y/Sample_Y_alevin_results/af_quant/alevin/quants_mat_rows.txt" ),
                    path( "${outputDir}/results_alevin/alevin/mtx_conversions/Sample_X/Sample_X_raw_matrix.seurat.rds" ),
                    path( "${outputDir}/results_alevin/alevin/mtx_conversions/Sample_X/Sample_X_raw_matrix.sce.rds" ),
                    path( "${outputDir}/results_alevin/alevin/mtx_conversions/Sample_Y/Sample_Y_raw_matrix.seurat.rds" ),
                    path( "${outputDir}/results_alevin/alevin/mtx_conversions/Sample_Y/Sample_Y_raw_matrix.sce.rds" )
                ).match()}

            ) // end of assertAll()

        }
    }

}
