/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        ext.args = '--quiet'
        time   = { 120.h  * task.attempt }
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    if (!params.skip_cellbender) {
        withName: 'CELLBENDER_REMOVEBACKGROUND' {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/${meta.id}/cellbender_removebackground" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: 'ANNDATA_BARCODES' {
            ext.prefix = { "${meta.id}_${meta.input_type}_matrix" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/mtx_conversions/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    withName: 'MTX_TO_H5AD|CONCAT_H5AD|ANNDATAR_CONVERT' {
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/mtx_conversions" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (filename.equals('versions.yml')) { null }
                else if (!filename.contains('combined_')) { "${meta.id}/${filename}" }
                else filename
            }
        ]
    }

    withName: 'GTF_GENE_FILTER' {
        publishDir = [
            path: { "${params.outdir}/gtf_filter" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }
}

if(params.aligner == "cellranger") {
    process {
        withName: CELLRANGER_MKGTF {
            publishDir = [
                path: "${params.outdir}/${params.aligner}/mkgtf",
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            ext.args = "--attribute=gene_biotype:protein_coding --attribute=gene_biotype:lncRNA --attribute=gene_biotype:pseudogene"
        }
        withName: CELLRANGER_MKREF {
            publishDir = [
                path: "${params.outdir}/${params.aligner}/mkref",
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: CELLRANGER_COUNT {
            publishDir = [
                path: "${params.outdir}/${params.aligner}/count",
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            ext.args = {"--chemistry ${meta.chemistry} --create-bam ${params.save_align_intermeds}" + " " + (meta.expected_cells ? "--expect-cells ${meta.expected_cells}" : '')}
            time   = { 240.h * task.attempt }
        }
    }
}

if(params.aligner == "cellrangerarc") {
    process {
        withName: CELLRANGERARC_MKGTF {
            publishDir = [
                path: "${params.outdir}/${params.aligner}/mkgtf",
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            ext.args = "--attribute=gene_biotype:protein_coding --attribute=gene_biotype:lncRNA --attribute=gene_biotype:pseudogene"
        }
        withName: CELLRANGERARC_MKREF {
            publishDir = [
                path: "${params.outdir}/${params.aligner}/mkref",
                mode: params.publish_dir_mode
            ]
        }
        withName: CELLRANGERARC_COUNT {
            publishDir = [
                path: "${params.outdir}/${params.aligner}/count",
                mode: params.publish_dir_mode
            ]
            ext.args = {meta.expected_cells ? "--expect-cells ${meta.expected_cells}" : ''}
            time   = { 240.h * task.attempt }
        }
    }
}

if (params.aligner == "alevin") {
    process {
        withName: GFFREAD_TXP2GENE {
            ext.args = "--table transcript_id,gene_id"
            ext.prefix = { "${gff.baseName}_gffread" }
        }
        withName: 'SIMPLEAF_INDEX' {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}" },
                mode: params.publish_dir_mode,
                enabled: params.save_reference
            ]
            ext.args = { "--rlen ${params.simpleaf_rlen}" }
        }
        withName: 'SIMPLEAF_QUANT' {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            ext.args = "-r cr-like"
        }
        // Fix for issue 196
        // Modified for issue 334
        withName: 'ALEVINQC' {
            time = { 120.h }
        }
    }
}

if (params.aligner == "star") {
    process {
        withName: STAR_ALIGN {
            ext.args = "--readFilesCommand zcat --runDirPerm All_RWX --outWigType bedGraph --twopassMode Basic --outSAMtype BAM SortedByCoordinate"
        }
        withName: STAR_GENOMEGENERATE {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/genome_generate" },
                mode: params.publish_dir_mode,
                enabled: params.save_reference,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        if(params.save_align_intermeds) {
            withName: 'STAR_ALIGN' {
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/${meta.id}" },
                    mode: params.publish_dir_mode
                ]
            }
        }
        else {
            withName: 'STAR_ALIGN' {
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/${meta.id}" },
                    mode: params.publish_dir_mode,
                    pattern: '*',
                    saveAs: { it.endsWith('.bam') ? null : it }
                ]
            }
        }
    }
}

if (params.aligner == 'kallisto') {
    process {
        withName: KALLISTOBUSTOOLS_REF {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}" },
                mode: params.publish_dir_mode,
                enabled: params.save_reference,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: KALLISTOBUSTOOLS_COUNT {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            ext.args = "--workflow ${params.kb_workflow} --filter"
        }
    }
}

if (params.aligner == 'cellrangermulti') {
    process {
        withName: FASTQC { ext.prefix = { "${meta.id}_${meta.feature_type}" } } // allow distinguishment of data types after renaming
        withName: 'NFCORE_SCRNASEQ:SCRNASEQ:CELLRANGER_MULTI_ALIGN:CELLRANGER_MULTI' {
            ext.prefix = null // force it null, for some reason it was being wrongly read in the module
            publishDir = [
                path: "${params.outdir}/${params.aligner}/count",
                mode: params.publish_dir_mode,
                saveAs: { filename -> ( filename.equals('versions.yml') || filename.equals('cellranger_multi_config.csv') ) ? null : filename }
            ]
        }
        withName: 'GUNZIP*' {
            publishDir = [
                enabled: false
            ]
        }
        withName: CELLRANGER_MKGTF {
            publishDir = [
                path: "${params.outdir}/${params.aligner}/mkgtf",
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: CELLRANGER_MKREF {
            publishDir = [
                path: "${params.outdir}/${params.aligner}/mkref",
                mode: params.publish_dir_mode
            ]
        }
        withName: CELLRANGER_MKVDJREF {
            publishDir = [
                path: "${params.outdir}/${params.aligner}/mkvdjref",
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}
