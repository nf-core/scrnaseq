nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"

    test("test-dataset_cellrangermulti_aligner") {

        when {
            // the rest is taken from shared config
            params {
                aligner                   = 'cellrangermulti'
                outdir                    = "${outputDir}/results_cellrangermulti"
                input                     = "${baseDir}/assets/cellrangermulti_samplesheet.csv"
                cellranger_multi_barcodes = "${baseDir}/assets/cellranger_barcodes_samplesheet.csv"
                gex_frna_probe_set        = "${baseDir}/assets/frna_probeset_subset.csv"
                fb_reference              = "${baseDir}/assets/fb_reference.csv"
                fasta                     = 'https://ftp.ensembl.org/pub/release-110/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.chromosome.14.fa.gz'
                gtf                       = 'https://ftp.ensembl.org/pub/release-110/gtf/homo_sapiens/Homo_sapiens.GRCh38.110.gtf.gz'
                aligner                   = 'cellrangermulti'
                protocol                  = 'auto'

                // Limit resources so that this can run on GitHub Actions -- for some reason it had not been taken from shared config
                max_cpus   = 4
                max_memory = '14.GB'
                max_time   = '6.h'
            }
        }

        then {

            assertAll(

                //
                // General assertions
                //

                // Did it finish successfully?
                {assert workflow.success},

                // How many tasks were executed?
                {assert workflow.trace.tasks().size() == 47},

                // How many results were produced?
                {assert path("${outputDir}/results_cellrangermulti").list().size() == 4},
                {assert path("${outputDir}/results_cellrangermulti/cellrangermulti").list().size() == 5},
                {assert path("${outputDir}/results_cellrangermulti/cellrangermulti/mtx_conversions").list().size() == 13},
                {assert path("${outputDir}/results_cellrangermulti/cellrangermulti/count").list().size() == 4},
                {assert path("${outputDir}/results_cellrangermulti/fastqc").list().size() == 48},
                {assert path("${outputDir}/results_cellrangermulti/multiqc").list().size() == 3},

                //
                // Check if files were produced
                //
                {assert new File( "${outputDir}/results_cellrangermulti/cellrangermulti/mtx_conversions/4PLEX_HUMAN/4PLEX_HUMAN_raw_matrix.h5ad" ).exists()},
                {assert new File( "${outputDir}/results_cellrangermulti/cellrangermulti/mtx_conversions/Colorectal_BC3/Colorectal_BC3_filtered_matrix.h5ad" ).exists()},
                {assert new File( "${outputDir}/results_cellrangermulti/cellrangermulti/mtx_conversions/Liver_BC1/Liver_BC1_filtered_matrix.h5ad" ).exists()},
                {assert new File( "${outputDir}/results_cellrangermulti/cellrangermulti/mtx_conversions/Ovarian_BC2/Ovarian_BC2_filtered_matrix.h5ad" ).exists()},
                {assert new File( "${outputDir}/results_cellrangermulti/cellrangermulti/mtx_conversions/Pancreas_BC4/Pancreas_BC4_filtered_matrix.h5ad" ).exists()},
                {assert new File( "${outputDir}/results_cellrangermulti/cellrangermulti/mtx_conversions/PBMC_10K_CMO/PBMC_10K_CMO_raw_matrix.h5ad" ).exists()},
                {assert new File( "${outputDir}/results_cellrangermulti/cellrangermulti/mtx_conversions/PBMC_10K_CMO_PBMCs_human_1/PBMC_10K_CMO_PBMCs_human_1_filtered_matrix.h5ad" ).exists()},
                {assert new File( "${outputDir}/results_cellrangermulti/cellrangermulti/mtx_conversions/PBMC_10K_CMO_PBMCs_human_2/PBMC_10K_CMO_PBMCs_human_2_filtered_matrix.h5ad" ).exists()},
                {assert new File( "${outputDir}/results_cellrangermulti/cellrangermulti/mtx_conversions/PBMC_10K_CMV/PBMC_10K_CMV_filtered_matrix.h5ad" ).exists()},
                {assert new File( "${outputDir}/results_cellrangermulti/cellrangermulti/mtx_conversions/PBMC_10K_CMV/PBMC_10K_CMV_raw_matrix.h5ad" ).exists()},
                {assert new File( "${outputDir}/results_cellrangermulti/cellrangermulti/mtx_conversions/PBMC_10K/PBMC_10K_filtered_matrix.h5ad" ).exists()},
                {assert new File( "${outputDir}/results_cellrangermulti/cellrangermulti/mtx_conversions/PBMC_10K/PBMC_10K_raw_matrix.h5ad" ).exists()},

                //
                // Check if files are the same
                //
                {assert snapshot(
                    workflow,

                    // PBMC_10K_CMO_PBMCs_human_1
                    path( "${outputDir}/results_cellrangermulti/cellrangermulti/count/PBMC_10K_CMO/outs/per_sample_outs/PBMC_10K_CMO_PBMCs_human_1/count/sample_filtered_feature_bc_matrix/barcodes.tsv.gz" ),
                    path( "${outputDir}/results_cellrangermulti/cellrangermulti/count/PBMC_10K_CMO/outs/per_sample_outs/PBMC_10K_CMO_PBMCs_human_1/count/sample_filtered_feature_bc_matrix/features.tsv.gz" ),
                    path( "${outputDir}/results_cellrangermulti/cellrangermulti/count/PBMC_10K_CMO/outs/per_sample_outs/PBMC_10K_CMO_PBMCs_human_1/count/sample_filtered_feature_bc_matrix/matrix.mtx.gz"   ),
                    path( "${outputDir}/results_cellrangermulti/cellrangermulti/count/PBMC_10K_CMO/outs/per_sample_outs/PBMC_10K_CMO_PBMCs_human_1/metrics_summary.csv" ),
                    path( "${outputDir}/results_cellrangermulti/cellrangermulti/mtx_conversions/PBMC_10K_CMO_PBMCs_human_1/PBMC_10K_CMO_PBMCs_human_1_filtered_matrix.rds" ),

                    // PBMC_10K_CMO_PBMCs_human_2
                    path( "${outputDir}/results_cellrangermulti/cellrangermulti/count/PBMC_10K_CMO/outs/per_sample_outs/PBMC_10K_CMO_PBMCs_human_2/count/sample_filtered_feature_bc_matrix/barcodes.tsv.gz" ),
                    path( "${outputDir}/results_cellrangermulti/cellrangermulti/count/PBMC_10K_CMO/outs/per_sample_outs/PBMC_10K_CMO_PBMCs_human_2/count/sample_filtered_feature_bc_matrix/features.tsv.gz" ),
                    path( "${outputDir}/results_cellrangermulti/cellrangermulti/count/PBMC_10K_CMO/outs/per_sample_outs/PBMC_10K_CMO_PBMCs_human_2/count/sample_filtered_feature_bc_matrix/matrix.mtx.gz"   ),
                    path( "${outputDir}/results_cellrangermulti/cellrangermulti/count/PBMC_10K_CMO/outs/per_sample_outs/PBMC_10K_CMO_PBMCs_human_2/metrics_summary.csv" ),

                    // RDS
                    file( "${outputDir}/results_cellrangermulti/cellrangermulti/mtx_conversions" ).find { file(it).name ==~ /.*.rds/ }

                ).match()}

            ) // end of assertAll()

        }
    }

}
